---
title: "Hands-on_Ex03"
author: "Vivian Fan Jing"
---

# 3.1 Learning Outcome

In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.

# 3.2 Getting Started

First, write a code chunk to check, install and launch the following R packages:

-   **ggiraph** for making ‘ggplot’ graphics interactive.

-   **plotly**, R library for plotting interactive statistical graphs.

-   **DT** provides an R interface to the JavaScript library DataTables that create interactive table on html page.

-   **tidyverse**, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.

-   **patchwork** for combining multiple ggplot2 graphs into one figure.

The code chunk below will be used to accomplish the task.

```{r}
pacman::p_load(ggiraph, plotly, DT, tidyverse, patchwork)
```

# 3.3 Importing Data

In this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.

The code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.

```{r}
library(readr)
exam_data <- read_csv("data/Exam_data.csv")
```

# 3.4 Interactive Data Visualisation - ggiraph methods

ggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.

Interactive is made with **ggplot geometries** that can understand three arguments:

-   **Tooltip**: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.

-   **Onclick**: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.

-   **Data_id**: a column of data-sets that contain an id to be associated with elements.

If it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this [article](https://www.ardata.fr/ggiraph-book/selections.html) for more detail explanation.

### **3.4.1 Tooltip effect with *tooltip* aesthetic**

Below shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.

p \<- ggplot(data=exam_data, aes(x = MATHS)) + geom_dotplot_interactive( aes(tooltip = ID), stackgroups = TRUE, binwidth = 1, method = "histodot") + scale_y_continuous(NULL, breaks = NULL) girafe( ggobj = p, width_svg = 6, height_svg = 6\*0.618 )

Notice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.

# 3.6 Interactivity

By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.

```{r}
library(ggplot2)
library(ggiraph)
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot") +
  scale_y_continuous(NULL, 
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)

```

## 3.6.1 Customising Tooltip style

Code chunk below uses opts_tooltip() of **ggiraph** to customize tooltip rendering by add css declarations.

tooltip_css \<- "background-color:white; #\<\< font-style:bold; color:black;" #\<\<

p \<- ggplot(data=exam_data, aes(x = MATHS)) + geom_dotplot_interactive(\
aes(tooltip = ID),\
stackgroups = TRUE,\
binwidth = 1,\
method = "histodot") +\
scale_y_continuous(NULL,\
breaks = NULL) girafe(\
ggobj = p,\
width_svg = 6,\
height_svg = 6\*0.618, options = list( #\<\< opts_tooltip( #\<\< css = tooltip_css)) #\<\< )

Notice that the background colour of the tooltip is black and the font colour is white and bold.


```{r}
tooltip_css <- "background-color: white; color: black; padding: 5px; border-radius: 5px;"

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = ID),                   
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(opts_tooltip(css = tooltip_css))
)                             
```



## 3.6.2 Displaying statistics on tooltip

Code chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.


```{r}
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE),
) +
  stat_summary(aes(y = MATHS, 
                   tooltip = after_stat(  
                     tooltip(y, ymax))),  
    fun.data = "mean_se", 
    geom = GeomInteractiveCol,  
    fill = "light blue"
  ) +
  stat_summary(aes(y = MATHS),
    fun.data = mean_se,
    geom = "errorbar", width = 0.2, linewidth = 0.2
  )

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```       

## 3.6.3 Hover effect with data_id aesthetic

Code chunk below shows the second interactive feature of ggiraph, namely data_id.

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(           
    aes(data_id = CLASS),             
    stackgroups = TRUE,               
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618                      
)


Interactivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(           
    aes(data_id = CLASS),             
    stackgroups = TRUE,               
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618                      
)
```

Note that the default value of the hover css is hover_css = “fill:orange;”.



## 3.6.4 Styling hover effect

In the code chunk below, css codes are used to change the highlighting effect.

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
)                           

Interactivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
)                           
```


